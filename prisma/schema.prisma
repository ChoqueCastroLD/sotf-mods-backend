generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  email     String @unique
  password  String
  name      String
  image_url String @default("")
  slug      String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mods         Mod[]
  favoriteMods ModFavorite[]
}

model Mod {
  id               Int     @id @default(autoincrement())
  name             String
  slug             String  @unique
  shortDescription String  @default("")
  description      String
  isNSFW           Boolean
  isApproved       Boolean
  isFeatured       Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User?         @relation(fields: [userId], references: [id])
  userId     Int?
  category   Category?     @relation(fields: [categoryId], references: [id])
  categoryId Int?
  versions   ModVersion[]
  tags       Tag[]
  images     ModImage[]
  favorites  ModFavorite[]
}

model ModImage {
  id          Int     @id @default(autoincrement())
  url         String
  preview_url String?
  isPrimary   Boolean
  isThumbnail Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mod   Mod? @relation(fields: [modId], references: [id])
  modId Int?
}

model ModVersion {
  id          Int     @id @default(autoincrement())
  version     String
  isLatest    Boolean
  changelog   String
  downloadUrl String
  extension   String?
  filename    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mod       Mod?          @relation(fields: [modId], references: [id])
  modId     Int?
  downloads ModDownload[]
}

model Tag {
  id          Int    @id @default(autoincrement())
  name        String
  slug        String @unique
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mods Mod[]
}

model Category {
  id          Int    @id @default(autoincrement())
  name        String
  slug        String @unique
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mods Mod[]
}

model ModDownload {
  id        Int    @id @default(autoincrement())
  ip        String
  userAgent String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version      ModVersion? @relation(fields: [modVersionId], references: [id])
  modVersionId Int?
}

model ModFavorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  mod   Mod? @relation(fields: [modId], references: [id])
  modId Int?
}

model KelvinGPTMessages {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatId  String
  message String
  role    String
  who     String
}
